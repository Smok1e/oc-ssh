local array = require("crypto/array")

local lib = {}

---------------------------------------- Lookup tables

local SUBSTITUTION_TABLE = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 
}

local INVERSE_SUBSTITUTION_TABLE = {
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D    
}

local MDS_MATRIX = {
    0x02, 0x03, 0x01, 0x01,
    0x01, 0x02, 0x03, 0x01,
    0x01, 0x01, 0x02, 0x03,
    0x03, 0x01, 0x01, 0x02
}

local INVERSE_MDS_MATRIX = {
    0x0E, 0x0B, 0x0D, 0x09,
	0x09, 0x0E, 0x0B, 0x0D,
	0x0D, 0x09, 0x0E, 0x0B,
	0x0B, 0x0D, 0x09, 0x0E
}

local ROUND_CONSTANTS = { 
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D 
}

---------------------------------------- Galois field of order 2^8 arithmetic

-- Elements of GF(2^8) (bytes) are represented as a 7 or less degree polynominals
-- a = a7x^7 + a6x^6 + a5x^5 + a4x^4 + a3x^3 + a2x^2 + a1x + a0,
-- where a0, ..., a7 coefficients are bits of byte a
--
-- Multiplication in GF(2^8) of bytes a and b is performed as a multiplication 
-- of their corresponding polynoms. To do this, we will basically have to be able to
-- multiply a given polynom by x^n which is done by multiplying n times by x (e. g. by 2).
--
-- x*a = 2*a = x(a7x^7 + a6x^6 + a5x^5 + a4x^4 + a3x^3 + a2x^2 + a1x + a0)
--           = a7x^8 + a6x^7 + a5x^6 a4x^5 + a3x^4 + a2x^3 + a1x^2 + a0x
--           = a << 1
-- 
-- We can see that this operation is equivalient to bitwise shift of byte a to the left
-- The result may be a 8-term polynominal, which in this case must be reduced to a 7-term
-- This is done by the multiplication modulo m = x^8 + x^4 + x^3 + x + 1 (0x11B)
--
-- This particular polynominal is choosen for mudular reduction because it 
-- is the minimal irreducible binary polynomial of degree 8.
--
--   (a7x^8 + a6x^7 + a5x^6 a4x^5 + a3x^4 + a2x^3 + a1x^2 + a0x) mod (x^8 + x^4 + x^3 + x + 1) = 
-- = (a7x^8 + a6x^7 + a5x^6 a4x^5 + a3x^4 + a2x^3 + a1x^2 + a0x) - (x^8 + x^4 + x^3 + x + 1) =
-- = (a6x^7 + a5x^6 a4x^5 + a3x^4 + a2x^3 + a1x^2 + a0x) - (x^4 + x^3 + x + 1)
-- = (a << 1) & 0xFF - 0x1B
--
-- The reduction is only done when the product is a 8-term polynominal, e. g. a7 != 0.
-- Subtraction and multiplication is done by XOR
local function GFMultiplyByX(byte)
    local result = (byte << 1) & 0xFF

    if byte >> 7 ~= 0 then
        result = result ~ 0x1B
    end

    return result
end

-- Multiplication by x^n can be done simply by repeating multiplication n times
local function GFMultiplyByXn(byte, n)
    local result = byte
    for i = 1, n do
        result = GFMultiplyByX(result)
    end

    return result
end

-- Finally, to multiply byte a by b, we have to multiply their corresponding polynoms
local function GFMultiply(lhs, rhs)
    local sum = 0

    for bit = 0, 7 do
        if (rhs >> bit) & 1 == 1 then
            sum = sum ~ GFMultiplyByXn(lhs, bit)
        end
    end
    
    return sum
end

---------------------------------------- Encryption steps

-- Direction defines whether the function is applied in inverse mode or not
local function shiftRows(state, direction)
    
    local function shiftRow(rowIndex, n)
        local row = {}
        for i = 1, 4 do
            row[i] = state[(i - 1) * 4 + rowIndex]
        end

        row = array.rotate(row, n)
        for i = 1, 4 do
            state[(i - 1) * 4 + rowIndex] = row[i]
        end
    end

    shiftRow(2, direction * 1)
    shiftRow(3, direction * 2)
    shiftRow(4, direction * 3)
end

-- MixColumns is basically just matrix multiplication
local function mixColumns(state, matrix)
    local result = {}
    for row = 1, 4 do
        for col = 1, 4 do
            local sum = 0
            for i = 1, 4 do
                sum = sum ~ GFMultiply(state[4 * (col - 1) + i], matrix[4 * (row - 1) + i])
            end

            result[4 * (col - 1) + row] = sum
        end
    end

    for i = 1, #result do
        state[i] = result[i]
    end
end

local function addRoundKey(state, roundKey)
    for row = 1, 4 do
        for col = 1, 4 do
            state[4 * (row - 1) + col] = state[4 * (row - 1) + col] ~ roundKey[4 * (row - 1) + col]
        end
    end
end

---------------------------------------- Encryption / decryption

-- Generate key schedule
-- N is the key length in 32-bit words (4/6/8 for AES-128/192/256)
-- R is the number of round keys needed (11/13/15 for AES-128/192/256)
function lib.expandKey(keyLength, key)
    local R = 11 + (keyLength - 128) // 32
    local N = keyLength // 32

    local roundKeys = array.fromBytes(key:sub(1, keyLength // 8))

    for i = N, 4*R - 1 do
        local prevWord, currWord = array.slice(roundKeys, -4)
        
        if i % N == 0 then
            currWord = array.xor(array.substitute(array.rotate(prevWord), SUBSTITUTION_TABLE), ROUND_CONSTANTS[i // N])
        elseif N > 6 and i % N == 4 then
            currWord = array.substitute(prevWord, SUBSTITUTION_TABLE)
        else
            currWord = prevWord
        end

        array.append(roundKeys, array.xor(currWord, array.slice(roundKeys, #roundKeys - N * 4 + 1, 4)))
    end

    return array.split(roundKeys, 16)
end

function lib.encrypt(keyLength, plaintext, roundKeys)
    if keyLength ~= 128 and keyLength ~= 192 and keyLength ~= 256 then
        error("unsupported key length")
    end

    local state = array.fromBytes(plaintext)
    local rounds = 10 + (keyLength - 128) // 32
    
    addRoundKey(state, roundKeys[1])
    for round = 1, rounds do
        state = array.substitute(state, SUBSTITUTION_TABLE)
        shiftRows(state, 1)
        
        if round < rounds then
            mixColumns(state, MDS_MATRIX)
        end

        addRoundKey(state, roundKeys[round + 1])
    end

    return array.toBytes(state)
end

function lib.decrypt(keyLength, cipher, roundKeys)
    if keyLength ~= 128 and keyLength ~= 192 and keyLength ~= 256 then
        error("unsupported key length")
    end

    local state = array.fromBytes   (cipher)
    local rounds = 10 + (keyLength - 128) // 32

    addRoundKey(state, roundKeys[#roundKeys])
    for round = 1, rounds do
        shiftRows(state, -1)
        state = array.substitute(state, INVERSE_SUBSTITUTION_TABLE)
        
        addRoundKey(state, roundKeys[#roundKeys - round])

        if round < rounds then
            mixColumns(state, INVERSE_MDS_MATRIX)
        end
    end

    return array.toBytes(state)
end

----------------------------------------

return lib